package com.esj.farmrecordsapp

import android.content.Context
import android.provider.SyncStateContract.Helpers.insert
import android.widget.Toast
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

class AnimalRecordsViewModel(private val animalRecordsRepository: AnimalRecordsRepository, private val context: Context) : ViewModel() {

    val records = animalRecordsRepository.records
    val name = MutableLiveData<String>()
    val operation = MutableLiveData<String>()
    val doer = MutableLiveData<String>()
    val saveOrUpdateButtonText = MutableLiveData<String>()
    val clearAllOrDeleteButtonText =  MutableLiveData<String>()

    init {
        saveOrUpdateButtonText.value = "Save"
        clearAllOrDeleteButtonText.value = "Clear All"
    }

    private val _imageResource = MutableLiveData<String>()
    val imageResource: LiveData<String> = _imageResource

    // Function to update the image resource
    fun updateImageResource(resourceId: String) {
        _imageResource.value = resourceId
    }

    fun saveOrUpdate(){

        val animalName = name.value
        val animalOperation = operation.value
        val operationDoer = doer.value
        val animalImage = _imageResource.value

        if (!animalImage.isNullOrEmpty()) {
            val animalRecord = AnimalRecord(
                id = 0, // Auto-generated by database
                name = animalName!!,
                operation = animalOperation!!,
                doer = operationDoer!!,
                image = animalImage,
                time = System.currentTimeMillis()
            )
            insert(animalRecord)
            name.value = ""
            operation.value = ""
            doer.value = ""

        } else {

            Toast.makeText(context, "record not saved", Toast.LENGTH_LONG).show()

        }
    }



    fun clearAllOrDelete(){
        clearAll()

    }

    fun insert(animalRecord: AnimalRecord){
        viewModelScope.launch(Dispatchers.IO) {
         animalRecordsRepository.insert(animalRecord)
        }
    }
    fun update(animalRecord: AnimalRecord){
        viewModelScope.launch(Dispatchers.IO) {
          animalRecordsRepository.update(animalRecord)
        }
    }
    fun delete(animalRecord: AnimalRecord){
        viewModelScope.launch(Dispatchers.IO) {
            animalRecordsRepository.delete(animalRecord)
        }
    }

    fun clearAll(){
        viewModelScope.launch(Dispatchers.IO) {
            animalRecordsRepository.deleteAll()
        }
    }


}